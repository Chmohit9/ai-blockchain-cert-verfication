/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface CertificateVerifierInterface extends Interface {
  getFunction(nameOrSignature: "storeHash" | "verifyHash"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "HashStored"): EventFragment;

  encodeFunctionData(functionFragment: "storeHash", values: [string]): string;
  encodeFunctionData(functionFragment: "verifyHash", values: [string]): string;

  decodeFunctionResult(functionFragment: "storeHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verifyHash", data: BytesLike): Result;
}

export namespace HashStoredEvent {
  export type InputTuple = [hash: string, sender: AddressLike];
  export type OutputTuple = [hash: string, sender: string];
  export interface OutputObject {
    hash: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CertificateVerifier extends BaseContract {
  connect(runner?: ContractRunner | null): CertificateVerifier;
  waitForDeployment(): Promise<this>;

  interface: CertificateVerifierInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  storeHash: TypedContractMethod<[_hash: string], [void], "nonpayable">;

  verifyHash: TypedContractMethod<[_hash: string], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "storeHash"
  ): TypedContractMethod<[_hash: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "verifyHash"
  ): TypedContractMethod<[_hash: string], [boolean], "view">;

  getEvent(
    key: "HashStored"
  ): TypedContractEvent<
    HashStoredEvent.InputTuple,
    HashStoredEvent.OutputTuple,
    HashStoredEvent.OutputObject
  >;

  filters: {
    "HashStored(string,address)": TypedContractEvent<
      HashStoredEvent.InputTuple,
      HashStoredEvent.OutputTuple,
      HashStoredEvent.OutputObject
    >;
    HashStored: TypedContractEvent<
      HashStoredEvent.InputTuple,
      HashStoredEvent.OutputTuple,
      HashStoredEvent.OutputObject
    >;
  };
}
